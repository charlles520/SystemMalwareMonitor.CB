using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using Microsoft.VisualBasic.CompilerServices;
using Newtonsoft.Json;

namespace SFMCB.Connections
{
    /*
    → BugFix
    → Multiplos Diretórios
    → Tcp Conections
    → x64 Only

*/
    public static class TCPProcess
    {
        public struct TcpInfo
        {
            public string LocalIP,
                LocalPort,
                RemoteIP,
                RemotePort,
                State;
            public int PID;
        }

        private static string doCaptureTCP(string Filename, string Parms = "")
        {
            Process Exec = new Process();
            string doCaptureTCP;
            try
            {
                var process = Exec;
                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.CreateNoWindow = true;
                process.StartInfo.FileName = Filename;
                process.StartInfo.Arguments = Parms ?? throw new ArgumentNullException(nameof(Parms));
                process.Start();
                var buffer = process.StandardOutput.ReadToEnd();
                Exec.WaitForExit();
                doCaptureTCP = buffer;
            }
            catch
            {
                doCaptureTCP = null;
            }
            return doCaptureTCP;
        }

        private static void ProcessDataInfo(string BlocoTotal, ref TCPProcess.TcpInfo[] TCPConnects)
        {
            string[] Linhas = BlocoTotal.Split(new char[]
            {
                '\n'
            });
            int ConnCount = 0;
            char[] Splitter = new char[]
            {
                ' '
            };
            checked
            {
                int num = Linhas.Count<string>() - 1;
                for (int Total = 0; Total <= num; Total++)
                {
                    string sLine = Linhas[Total].Trim();
                    bool flag = !string.IsNullOrEmpty(sLine);
                    if (flag)
                    {
                        bool flag2 = Total > 3;
                        if (flag2)
                        {
                            bool flag3 = sLine.StartsWith("TCP");
                            if (flag3)
                            {
                                TCPConnects = (TcpInfo[])Utils.CopyArray(TCPConnects, new TcpInfo[ConnCount + 1]);
                                string[] _4Partes = sLine.Split(Splitter, StringSplitOptions.RemoveEmptyEntries);
                                ref TcpInfo ptr = ref TCPConnects[ConnCount];
                                ptr.LocalIP = _4Partes[1].Split(new char[]
                                {
                                    ':'
                                })[0];
                                ptr.LocalPort = _4Partes[1].Split(new char[]
                                {
                                    ':'
                                })[1];
                                ptr.RemoteIP = _4Partes[2].Split(new char[]
                                {
                                    ':'
                                })[0];
                                ptr.RemotePort = _4Partes[2].Split(new char[]
                                {
                                    ':'
                                })[1];
                                ptr.State = _4Partes[3];
                                ptr.PID = Convert.ToInt32(_4Partes[4]);
                                ConnCount++;
                            }
                        }
                    }
                }
            }
        }

        public static void SetError(string message , string title = "Error")
        {
            MessageBox.Show(message, title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        }

        public static bool getTCPListNow(ref TcpInfo[] TCPConnects)
        {
            string Buffer = doCaptureTCP("netstat", "-no");
            bool doRet = string.IsNullOrEmpty(Buffer);
            bool flag = doRet;
            if (flag)
            {
                SetError("Não foi possível receber dados.", "Error");
            }
            else
            {
                ProcessDataInfo(Buffer, ref TCPConnects);
            }
            return !doRet;
        }

        public static string getDnsNameFromIP(string ipStr)
        {
            WebClient web = new WebClient();
            string varStr = web.DownloadString("https://dns.google.com/resolve?name=" + ipStr + ".in-addr.arpa&type=PTR");
            object myObject = RuntimeHelpers.GetObjectValue(JsonConvert.DeserializeObject(varStr));
            string tempo = "";
            bool flag = !string.IsNullOrEmpty(varStr);
            if (flag)
            {
                try
                {
                    tempo = Conversions.ToString(NewLateBinding.LateIndexGet(NewLateBinding.LateIndexGet(NewLateBinding.LateIndexGet(myObject, new object[]
                    {
                        "Authority"
                    }, null), new object[]
                    {
                        0
                    }, null), new object[]
                    {
                        "data"
                    }, null));
                }
                catch
                {
                    return tempo;
                }
            }
            return tempo;
        }
    }
}
